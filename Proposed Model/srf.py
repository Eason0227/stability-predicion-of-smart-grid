# -*- coding: utf-8 -*-
"""SRF.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/15J6OKI6zm9H1sYr2wB56-QmZe9r8fJXV
"""

import pandas as pd
import numpy as np

from sklearn.tree import DecisionTreeRegressor
from sklearn.model_selection import train_test_split


def Strength_Random_Forest(training_x , training_y, test_x, max_depth, sample_size, n_trees, n_features):
    strength_set = []
    test_predicted_ys = []
    for i in range(n_trees):
        train_x, valid_x ,train_y ,valid_y = train_test_split(training_x, training_y , train_size = sample_size) #隨機選擇n%的樣本
        DT = DecisionTreeRegressor(max_depth = max_depth , max_features=n_features )
        DT.fit(train_x,train_y)
        dt_pred = DT.predict(valid_x)

        confidence = []
        margin = np.abs(dt_pred - valid_y)
        for j in range(len(margin)):
            confidence.append(1/ math.exp(margin.values[j]))
        strength = np.sum(confidence)/len(confidence)
        strength_set.append(strength)

        test_pred = DT.predict(test_x)
        test_predicted_ys.append(test_pred)

        final_result = []
    for i in range(len(test_predicted_ys[0])): #y的數量
        predict_result = [] #存放每棵樹的預測值 #100棵樹有100個預測值
        for j in range(len(test_predicted_ys)):
            predict_result.append( (test_predicted_ys[j][i]) )
        strength_predict_result = np.array(predict_result) * np.array(strength_set) #每顆樹的預測值*每個樹的strength
        final_result.append( np.mean(strength_predict_result)  ) #存放最後的2000個預測值

    return final_result